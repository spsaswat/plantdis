// Firestore Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is accessing their own data
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Helper function to validate plant data
    function isValidPlantData() {
      let data = request.resource.data;
      return data.keys().hasAll(['plantId', 'userId', 'createdAt', 'status', 'images']) &&
             data.plantId is string &&
             data.userId == request.auth.uid &&
             data.createdAt is timestamp &&
             data.status in ['pending', 'processing', 'completed'] &&
             data.images is list;
    }
    
    // Helper function to validate image data
    function isValidImageData() {
      let data = request.resource.data;
      return data.keys().hasAll(['imageId', 'plantId', 'userId', 'originalUrl', 'uploadTime']) &&
             data.imageId is string &&
             data.plantId is string &&
             data.userId == request.auth.uid &&
             data.originalUrl is string &&
             data.uploadTime is timestamp;
    }
    
    // Rules for users collection
    match /users/{userId} {
      // Users can read and update their own data
      allow read: if isAuthenticated() && isOwner(userId);
      // Only authenticated users can create profiles, and only for themselves
      allow create: if isAuthenticated() && isOwner(userId);
      // Only admins can delete user profiles
      allow delete: if false; // Prevent user deletion through client
    }
    
    // Rules for plants collection
    match /plants/{plantId} {
      // Users can read their own plants or completed plants
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        resource.data.status == 'completed'
      );
      // Only authenticated users can create plants
      allow create: if isAuthenticated() && isValidPlantData();
      // Only authenticated users can update their own plants
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      // Only authenticated users can delete their own plants
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Rules for images collection
    match /images/{imageId} {
      // Users can read their own images or completed plants' images
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        get(/databases/$(database)/documents/plants/$(resource.data.plantId)).data.status == 'completed'
      );
      // Only authenticated users can create images, and only for themselves
      allow create: if isAuthenticated() && isValidImageData();
      // Only authenticated users can update their own images
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      // Only authenticated users can delete their own images
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
  }
}

// Storage Rules
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is accessing their own data
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      return isAuthenticated() && 
        firestore.get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Helper function to check file size (limit to 10MB)
    function isValidFileSize() {
      return request.resource.size < 10 * 1024 * 1024;
    }
    
    // Helper function to check file type
    function isImage() {
      return request.resource.contentType.matches('image/.*');
    }
    
    // Rules for user profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated() && isOwner(userId) && isImage();
    }
    
    // Rules for user plant images - original
    match /users/{userId}/plants/{plantId}/original/{imageId} {
      allow read: if isAuthenticated() && (
        isOwner(userId) ||
        exists(/databases/$(database)/documents/plants/$(plantId)) &&
        get(/databases/$(database)/documents/plants/$(plantId)).data.status == 'completed'
      );
      allow create: if isAuthenticated() && isOwner(userId) && isImage();
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Rules for user plant images - processed
    match /users/{userId}/plants/{plantId}/processed/{fileName} {
      allow read: if isAuthenticated() && (
        isOwner(userId) ||
        exists(/databases/$(database)/documents/plants/$(plantId)) &&
        get(/databases/$(database)/documents/plants/$(plantId)).data.status == 'completed'
      );
      allow create: if isAuthenticated() && isOwner(userId) && isImage();
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Rules for reference plant images
    match /plants/reference/{imageId} {
      allow read: if true;
      allow write: if isAdmin() && isImage();
    }
    
    // Rules for community plant images
    match /plants/community/{imageId} {
      allow read: if true;
      allow create: if isAuthenticated() && isImage();
      allow delete: if isAuthenticated() && (
        isOwner(request.resource.metadata.userId) || isAdmin()
      );
    }
  }
} 